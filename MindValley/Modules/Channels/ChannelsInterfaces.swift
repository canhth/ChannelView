// 
//  ChannelsInterfaces.swift
//  MindValley
//
//  Created by Canh Tran Wizeline on 4/9/20.
//  Copyright © 2020 CanhTran. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

// Dependency
protocol ChannelsDependencyInterface {
    func makeChannelsView() -> ViewInterface
}

// Router
protocol ChannelsRouterInterface: NavigationRouterInterface {
}

// ViewController
protocol ChannelsViewInterface: ViewInterface {
    func reloadData()
    func setLoadingVisible(_ visible: Bool)
}

// Presenter
protocol ChannelsPresenterInterface: PresenterInterface {
    func numberOfSections() -> Int
    func numberOfCategories() -> Int
    func numberOfNewEpisodes() -> Int
    func listChannelItems() -> [Channel]
    func listNewEpisodes() -> [Media]
    func categoryAtIndex(index: Int) -> Category
    func newEpisodeAt(index: Int) -> Media
    func channelAtIndex(index: Int) -> Channel
    func refreshAllChannels()
    func fetchChannelsInfo()
}

// Interactor
protocol ChannelsInteractorInterface {
    func fetchNewEpisodes(loadFromCache: Bool, completion: @escaping (Result<[Media], NetworkError>) -> Void)
    func fetchChannels(loadFromCache: Bool, completion: @escaping (Result<[Channel], NetworkError>) -> Void)
}

enum ChannelSection: Int {
    case newEpisodes
    case channels
    case categories
    
    static func getSectionType(by index: Int, numberOfSections: Int) -> ChannelSection {
        var sectionType: ChannelSection = .channels
        if index == 0 {
            sectionType = .newEpisodes
        } else if index == numberOfSections - 1 {
            sectionType = .categories
        }
        return sectionType
    }
}
