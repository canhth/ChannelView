// 
//  ChannelsInteractor.swift
//  MindValley
//
//  Created by Canh Tran Wizeline on 4/9/20.
//  Copyright ¬© 2020 CanhTran. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

final class ChannelsInteractor {
    // MARK: - Private Properties
    private let networkClient: NetworkRequestable

    // MARK: - LifeCycle

    init(networkClient: NetworkRequestable = NetworkClient()) {
        self.networkClient = networkClient
    }
}

// MARK: - ChannelsInteractorInterface

extension ChannelsInteractor: ChannelsInteractorInterface {
    func fetchNewEpisodes(loadFromCache: Bool, completion: @escaping (Result<[Media], NetworkError>) -> Void) {
        self.networkClient.fetch(endPoint: ChannelsAPI.fetchNewEpisodes, type: [String: [String: [Media]]].self, loadFromCache: false) { (result) in
            switch result {
            case .success(let categories):
                print(categories[NestedKey.data]?[NestedKey.media])
            case .failure(let error):
                print(error)
            }
        }
    }
    
    func fetchChannels(loadFromCache: Bool, completion: @escaping (Result<[Channel], NetworkError>) -> Void) {
        self.networkClient.fetch(endPoint: ChannelsAPI.fetchChannels, type: [String: [String: [Channel]]].self, loadFromCache: false) { (result) in
            switch result {
            case .success(let categories):
                print(categories[NestedKey.data]?[NestedKey.channels])
            case .failure(let error):
                print(error)
            }
        }
    }
    
    func fetchCategories(completion: @escaping (Result<[Category], NetworkError>) -> Void) {
        self.networkClient.fetch(endPoint: ChannelsAPI.fetchCategories, type: [String: [String: [Category]]].self, loadFromCache: false) { (result) in
            switch result {
            case .success(let categories):
                print(categories[NestedKey.data]?[NestedKey.categories])
            case .failure(let error):
                print(error)
            }
        }
    }
    
}
