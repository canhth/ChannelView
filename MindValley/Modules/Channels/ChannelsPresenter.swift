// 
//  ChannelsPresenter.swift
//  MindValley
//
//  Created by Canh Tran Wizeline on 4/9/20.
//  Copyright © 2020 CanhTran. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class ChannelsPresenter {
    // MARK: - Private Properties

    private unowned let view: ChannelsViewInterface
    private let interactor: ChannelsInteractorInterface
    private let router: ChannelsRouterInterface

    private var newEpisodes = [Media]() {
        didSet {
            
        }
    }
    
    private var listChannels = [Channel]() {
        didSet {
            
        }
    }
    
    private var categories = [Category]() {
        didSet {
            
        }
    }
    
    // MARK: - LifeCycle

    init(view: ChannelsViewInterface,
         interactor: ChannelsInteractorInterface,
         router: ChannelsRouterInterface) {
        self.view = view
        self.interactor = interactor
        self.router = router
    }

    func viewDidLoad() {
        fetchChannelsInfo()
    }
}

// MARK: - ChannelsPresenterInterface

extension ChannelsPresenter: ChannelsPresenterInterface {
    
    private func loadNewEpisodeFromCache() {
        interactor.fetchNewEpisodes(loadFromCache: true) { (result) in
            switch result {
            case .success(let episodes):
                self.newEpisodes = episodes
            case .failure(let error):
                Logger.shared.error(object: error)
            }
        }
    }
    
    func numberOfSections() -> Int {
        return listChannels.count + (categories.isEmpty ? 0 : 1) + (newEpisodes.isEmpty ? 0 : 1)
    }
    
    func numberOfCategories() -> Int {
        return categories.count
    }
    
    func numberOfNewEpisodes() -> Int {
        return newEpisodes.count
    }
    
    func categoryAtIndex(index: Int) -> Category {
        return categories[index]
    }
    
    func newEpisodeAt(index: Int) -> Media {
        return newEpisodes[index]
    }
    
    func channelAtIndex(index: Int) -> Channel {
        return listChannels[index]
    }
    
    
    func refreshAllChannels() {
        
    }
    
    func fetchChannelsInfo() {
        
    }
    
}
